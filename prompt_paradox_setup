# Load dependencies.
pmodload 'helper'

CURRENT_BG='NONE'
SEGMENT_SEPARATOR='⮀'


# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
prompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    echo -n " %{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR%{$fg%} "
  else
    echo -n "%{$bg%}%{$fg%} "
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && print -Pn $3
}

# End the prompt, closing any open segments
prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    echo -n " %{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
  else
    echo -n "%{%k%}"
  fi
  echo -n "%{%f%}"
  CURRENT_BG=''
}

function build_prompt {
  #prompt_segment black default '%(1?;%{%F{red}%}✘ ;)%(!;%{%F{yellow}%}⚡ ;)%(1j;%{%F{cyan}%}%j⚙ ;)'
  prompt_segment green black '%F{32}◉ ⮁' # ❡ ↹
  #prompt_segment black default  '%{%F{blue}%}%n%}% %F{white}@ %{%F{green}%}%M'
  prompt_segment blue black '%2~'

  if [ "${vcs_info_msg_0_}" != "" ]; then
    prompt_segment green black '%F{black}⭠${vcs_info_msg_0_}'
  fi

  prompt_segment black white '%F{red}♦ ${rbv:5}'

  prompt_end
}

start_time=$SECONDS
function prompt_paradox_preexec {
  start_time=$SECONDS
}

function calc_elapsed_time {
  if [[ $timer_result -ge 3600 ]]; then
    let "timer_hours = $timer_result / 3600"
    let "remainder = $timer_result % 3600"
    let "timer_minutes = $remainder / 60"
    let "timer_seconds = $remainder % 60"
    print -P "%B%F{red}>>> elapsed time ${timer_hours}h${timer_minutes}m${timer_seconds}s%b"
  elif [[ $timer_result -ge 60 ]]; then
    let "timer_minutes = $timer_result / 60"
    let "timer_seconds = $timer_result % 60"
    print -P "%B%F{yellow}>>> elapsed time ${timer_minutes}m${timer_seconds}s%b"
  elif [[ $timer_result -gt 10 ]]; then
    print -P "%B%F{green}>>> elapsed time ${timer_result}s%b"
  fi
}

function prompt_paradox_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  vcs_info

  if (( $+functions[ruby-info] )); then
    ruby-info
  fi

  rbv=`rvm-prompt`

  timer_result=$(($SECONDS-$start_time))
  if [[ $timer_result -gt 10 ]]; then
    calc_elapsed_time
  fi
  start_time=$SECONDS
}

function prompt_paradox_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info

  # Add hook for calling git-info before each command.
  add-zsh-hook preexec prompt_paradox_preexec
  add-zsh-hook precmd prompt_paradox_precmd

  # Setup VCS_INFO  
  zstyle ':vcs_info:*' enable git svn
  zstyle ':vcs_info:*' stagedstr '%F{red}●'
  zstyle ':vcs_info:*' unstagedstr '%F{green}●'
  zstyle ':vcs_info:*' check-for-changes true
  #zstyle ':vcs_info:*' get-revision true
  #zstyle ':vcs_info:*' use-simple true

  #zstyle ':vcs_info:*' formats ' %F{8}%b%f %F{white}%.7i%f%u'
  zstyle ':vcs_info:*' formats '%c %b %u'
  #zstyle ':vcs_info:*' actionformats ' %F{8}%b%f %F{white}%.7i%f +%a%u'
  zstyle ':vcs_info:git*+set-message:*' hooks git-status

  zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format '%B%F{blue}❯%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%F{red}♺%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format '%B%F{red}❮%f%b'

  # Set ruby-info parameters.
  zstyle ':prezto:module:ruby:info:version' format ' %F{white}%v%f'

  # Define prompts.
  PROMPT='
%{%f%b%k%}$(build_prompt)
 ${editor_info[keymap]} '
  RPROMPT='[%D{%L:%M:%S %p}]'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_paradox_setup "$@"

